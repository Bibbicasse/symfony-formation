  **********************************************
                    SYMFONY 
  **********************************************        
INSTALLATION SYMFONY  
composer create-project symfony/website-skeleton mon_nom_du_projet


C'est un framework PHP (cadriciel), une boite à outils logicielles.
CRUD (Creat, Read, Update, Delete) -> Symfony va nous permettre de faciliter le dévelopmment d'application en PHP 

* Logiciel libre cré en 2009 par Fabien Potencier
* v.5.2
* Ensemble de composants (components) dont le coeur s'appelle "kernel" en anglais (noyau). On peut installer uniquement le kernel mais son fonctionne sera limité, il faudra installer d'autre composants.

LES COMPOSANTS 
- Doctrine : Gère la BDD / ORM (Objet relation manager) -> Dans l'appli symfony on ne connais que l'ORM
- twig : va servir à faire des templates (gabarie) HTML 
- Monolog : outil pour gérer les jounaux de logiciels (historique, journaux d'utilisation)
-API : sert à créer une architecture pour que les développeurs front puissent accéder à ses données.

On peut utiliser chacun de ses composants séparément

COMPOSER
Ces composants sont installé avec un outil PHP -> Composer
Composer s'utilise dans la console/terminal (il faut au préable installer une console et composer) 

  **********************************************
            Composer Require Doctrine 
  **********************************************  
Tout programme qui respecte les conventions (PSR-4 peut être chargé avec composer)

Les répertoires :
- bin : fichiers exécutables, des outils pour nous simplifier la vie (console, phpunit, etc) 
- config : contient les fichiers de configurations de symfony et de ses composants
- doc : contient tous les fichiers .txt avec nos notes personnelles
- migrations : Doctrine va versionner l'évolution de la structure de la base de données (fichier php)
- public : dossier à rendre accessible au serveur HTTP
- src : code de notre application
- Template : Dossier contenant les gabarits/maquettes HTML
- tests : l'endroit ou l'on écrira nos test*
- translations : l'endroit pour traduire
- var : c'est un dossier de fichier temporaire de symfony : le cache et les journaux
- vendor : n'est pas lié a symfony mais à composer qui stocke à cette endroit tous les fichiers

fichier racine :
.env : fichier de configurations pour notre environnement à nous (connexion à la BDD)
composer.json : Fichier utile à composer pour paramétrer ce paquet

Flex :
- /!\ Aucun rapport avec flex de CSS /!\
- Flex dans le sens de symfony flex est un logiciel qui sert l'installation des composants.
- Les developpeurs écrivent des recettes qui expliquent comment s'installent les composants de symfony.



  **********************************************
              ARCHITECTURE MVC 
  **********************************************

Une facon d'écrire du code (Patron de conception, ou Pattern) en séparant 3 éléments  :
  - Modèle (model) : L'ensemble du code qui va intéragir avec la BDD. 
  - Vue (view) : Tout ce qui concerne le rendu visuel.
  - Contrôleur (controller) : Il fera le lien entre le modèle et la vue (au moyen d'une route), gère aussi l'authentification des droits de modification. 

Intérêt :
  1/ Façon d'organiser le code à plusieurs : (ex. Pour les Intégrateurs)
  2/ Façon d'optimiser les performances : (ex. séparant le code qui requête la BDD du code qui fait le rendu visuel.)

  d'autre architecture existent (ADR -> action domaine Responder, DDD -> Domain Driven Design, etc)

Une route :
- Elle est légèrement différente d'une URL 
- Morceau d'URL à laquelle va correspondre une action dans notre application 
ex :
- /articles/: récupération de tous les articles
- /articles/new : créer un article 
- /articles/1 : afficher l'article 1
- /articles/1/edit : modifier l'article 1
- /articles/1/delete : supprimer l'article 1

2/ Utiliser un commentaire multi-lignes pour donner une @Route
3/Debug avec php bin/console debug:router 
4/Voir ArticlesController.php

ENTITÉ :
Une table sera représentée par une classe dans Symfony.
Les propriétés vont représenter les champs de la table.

Il y a 3 façons de créer une table :
1/ Version compliquée, on se prend la tête : A RECHERCHE DANS LA DOC /!\
        * Créer une nouvelle classe dans entity et l'annoter avec @ORM\Entity
        * Dans cette classe on créera nos intitulés de colonnes que l'on définiera grâce aux annotations
        * On fait un getter pour l'id et un getter et un setter pour les autres intitulés de colonnes 
        * Aller dans la console et taper `php bin/console doctrine:schema:update --force`

2/ Version moins compliquée mais pas propre quand même
        * Dans la console on met : ` php bin/console make:entity`
        * La console nous propose de créer les colonnes et de leur donner une valeur (pas besoin de l'index / ajouter automatiquement)
        * On vérifie ce qu'il y a dans notre page qui a été créée 
        * Aller dans la console et taper `php bin/console doctrine:schema:update --force`

3/ Version moins compliquée et propre
        * Dans la console on met : ` php bin/console make:entity`
        * La console nous propose de créer les colonnes et de leur donner une valeur (pas besoin de l'index / ajouter automatiquement)
        * On vérifie ce qu'il y a dans notre page qui a été créée 
        * Aller dans la console et taper `php bin/console make:migration`
        * Vérifier la classe créée
        * Lancer dans la console : `php bin/console doctrine:migrations:migrate` 
          ou pour les feignasses : `php bin/console d:m:m`

REPOSITORY 
À côté de l'entité est créé un REPOSITORY qui servira à contenir les fonctionsde recherche dans la base de données (BDD). 

INJECTION DE DÉPENDANCES - DEPENDENCY INJECTION
Lorsque l'on travaille dans le contrôleur, on aura besoin de nombreux outils externes : 
- L'outil de recherche en BDD (en répository)
- L'outil d'envoi de mails (mailer)
- L'outil pour chiffré un mot de passe (hasher)
- ...

Dans Symfony, on accède facilement à ces instances grâce à l'injection de dépendances. Il suffit d'écrire le type et un nom de variable dans la méthode. Si symfony connait ce type, il l'instanciera et le fournira.
Quand Symfony met en relation nos fonctions et ses méthodes, on parle d'autowiring.

La liste complète des dépendances utilisable : 
- 'PHP bin/console debug:autowiring'
- ''